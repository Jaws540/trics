/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TIG;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.regex.Pattern;

import org.junit.Test;

import TIG.characterSheet.CharacterSheet;
import TIG.scripts.Entry;
import TIG.scripts.Environment;
import TIG.scripts.compiler.Interpreter;
import TIG.scripts.compiler.Token;
import TIG.utils.Def;
import TIG.utils.TestData;
import TIG.utils.Utils;
import TIG.utils.exceptions.interpreterExceptions.InterpreterRuntimeException;

public class AppTest {
	
	private final String testSavePath = "D:\\Users\\Jacob\\Coding\\Java\\RPGIS\\RPG-Integrated-System\\res\\";
	private final String characterSavePath = testSavePath + "testSave2.json";
	
	@Test public void testStringEscapes() {
		String test1 = "\"This is a valid test\"";
		String test2 = "\"This is a 'valid' test\"";
		String test3 = "\"This is a \n valid test\"";
		String test4 = "\"This is a \\\"valid\\\" test\"";
		String test5 = "\"This is a \"valid\" test\"";
		System.out.println(Token.STRING_LITERAL.matches(test1) + ":" + test1.length() + ": '" + test1 + "'");
		System.out.println(Token.STRING_LITERAL.matches(test2) + ":" + test2.length() + ": '" + test2 + "'");
		System.out.println(Token.STRING_LITERAL.matches(test3) + ":" + test3.length() + ": '" + test3 + "'");
		System.out.println(Token.STRING_LITERAL.matches(test4) + ":" + test4.length() + ": '" + test4 + "'");
		System.out.println(Token.STRING_LITERAL.matches(test5) + ":" + test5.length() + ": '" + test5 + "'");
		assertTrue(Token.STRING_LITERAL.matches(test1) == 22);
		assertTrue(Token.STRING_LITERAL.matches(test2) == 24);
		assertTrue(Token.STRING_LITERAL.matches(test3) == 24);
		assertTrue(Token.STRING_LITERAL.matches(test4) == 26);
		assertTrue(Token.STRING_LITERAL.matches(test5) == 12);
	}
	
	@Test public void testIdentifierRegex() {
		// Identifiers can contain and [a-zA-Z0-9_:] as long as they
		//	- dont start with [0-9:]
    	assertFalse(Pattern.matches(Def.ID_REGEX, ":test"));
    	assertFalse(Pattern.matches(Def.ID_REGEX, "2day"));
    	
    	assertTrue(Pattern.matches(Def.ID_REGEX, "d2"));
    	assertTrue(Pattern.matches(Def.ID_REGEX, "d2ata"));
    	assertTrue(Pattern.matches(Def.ID_REGEX, "ad2ata"));
    	assertTrue(Pattern.matches(Def.ID_REGEX, "display"));
    	assertTrue(Pattern.matches(Def.ID_REGEX, "i"));
    	assertTrue(Pattern.matches(Def.ID_REGEX, "test"));
    	assertTrue(Pattern.matches(Def.ID_REGEX, "std:test"));
    	assertTrue(Pattern.matches(Def.ID_REGEX, "i2"));
    	assertTrue(Pattern.matches(Def.ID_REGEX, "test2"));
    	assertTrue(Pattern.matches(Def.ID_REGEX, "__d2"));
    	assertTrue(Pattern.matches(Def.ID_REGEX, "__:d2"));
	}
	
    @Test public void testCharacterSaveToJson() {
    	boolean output = Utils.saveJSON(TestData.testCharacter, characterSavePath);
    	assertTrue(output);
    }
    
    @Test public void testCharacterLoadFromJson() {
    	try {
    		CharacterSheet character = Utils.loadCharacter(characterSavePath);
    		assertNotNull(character);
    	}catch(Exception e) {
    		e.printStackTrace();
    		assertFalse(true);
    	}
    }
    
    @Test public void testCharacterInfoEnvironment() {
    	CharacterSheet character = null;
    	try {
    		character = Utils.loadCharacter(characterSavePath);
    		assertNotNull(character);
    	}catch(Exception e) {
    		e.printStackTrace();
    		assertFalse(true);
    	}
    	
    	try {
			Entry info = character.envGet("Info", 0);
			Environment infoEnv = (Environment) info.val;
			
			Entry playerName = infoEnv.envGet("playerName", 0);
			assertTrue(((String) playerName.val).equals("Jacob"));
			
			Entry characterName = infoEnv.envGet("characterName", 0);
			assertTrue(((String) characterName.val).equals("Illra"));
			
			Entry level = infoEnv.envGet("Level", 0);
			assertTrue((Integer) level.val == 6);
			
			Entry race = infoEnv.envGet("Race", 0);
			assertTrue(((String) race.val).equals("Dragonborn"));
			
		} catch (InterpreterRuntimeException e) {
			e.printStackTrace();
			assertFalse(true);
		}
    }
    
    @Test public void testCharacterFeaturesEnvironment() {
    	CharacterSheet character = null;
    	try {
    		character = Utils.loadCharacter(characterSavePath);
    		assertNotNull(character);
    	}catch(Exception e) {
    		e.printStackTrace();
    		assertFalse(true);
    	}
    	
    	try {
			Entry feats = character.envGet("Features", 0);
			Environment featsEnv = (Environment) feats.val;
			
			Entry str = featsEnv.envGet("Strength", 0);
			Environment strEnv = (Environment) str.val;
			
			Entry strDisplayName = strEnv.envGet("displayName", 0);
			assertTrue(((String) strDisplayName.val).equals("Strength"));
			
			Entry strDescription = strEnv.envGet("description", 0);
			assertTrue(((String) strDescription.val).equals("Strength Ability"));
			
			Entry strVal = strEnv.envGet("Value", 0);
			assertTrue(((Integer) strVal.val) == 18);
			
		} catch (InterpreterRuntimeException e) {
			e.printStackTrace();
			assertFalse(true);
		}
    }
    
    @Test public void testCharacterInventoryEnvironment() {
    	CharacterSheet character = null;
    	try {
    		character = Utils.loadCharacter(characterSavePath);
    		assertNotNull(character);
    	}catch(Exception e) {
    		e.printStackTrace();
    		assertFalse(true);
    	}
    	
    	try {
			Entry inv = character.envGet("Inventory", 0);
			Environment invEnv = (Environment) inv.val;
			
			Entry feats = invEnv.envGet("Features", 0);
			Environment featsEnv = (Environment) feats.val;
			
			Entry dndInv = featsEnv.envGet("dnd::inventory", 0);
			Environment dndInvEnv = (Environment) dndInv.val;
			
			Entry carryWeight = dndInvEnv.envGet("Carry_Weight", 0);
			assertTrue((Double) carryWeight.val == 250.0);
			
			Entry dagger = invEnv.envGet("dagger", 0);
			Environment daggerEnv = (Environment) dagger.val;
			
			Entry daggerDisplayName = daggerEnv.envGet("displayName", 0);
			assertTrue(((String) daggerDisplayName.val).equals("Dagger"));
			
			Entry daggerDescription = daggerEnv.envGet("description", 0);
			assertTrue(((String) daggerDescription.val).equals("Stab with it lol"));
			
			Entry daggerStdItem = daggerEnv.envGet("std::item", 0);
			Environment daggerStdItemEnv = (Environment) daggerStdItem.val;
			
			Entry daggerWeight = daggerStdItemEnv.envGet("weight", 0);
			assertTrue((Double) daggerWeight.val == 1.0);
			
		} catch (InterpreterRuntimeException e) {
			e.printStackTrace();
			assertFalse(true);
		}
    }
    
    // TODO: Add more specific lexer and parser tests
    
    @Test public void testInterpreterCompile() {
    	Interpreter interp = new Interpreter("D:\\Users\\Jacob\\Coding\\Java\\RPGIS\\RPG-Integrated-System\\res\\TestScript1.cis", null);
    	assertTrue(interp.compile());
    }
}
